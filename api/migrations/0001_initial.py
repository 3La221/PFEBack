# Generated by Django 5.0.4 on 2024-06-01 16:28

import api.enums
import api.managers
import api.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(default=api.models.generate_short_id, editable=False, max_length=8, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', api.managers.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='Allergie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('affiche', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Antecedent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('membre', models.CharField(blank=True, max_length=100, null=True)),
                ('cateogry', models.CharField(blank=True, max_length=80, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Maladie',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('isChronic', models.BooleanField(default=False)),
                ('maladie_type', models.CharField(choices=[('CARDIOVASCULAIRE', 'Maladie cardiovasculaire'), ('RESPIRATOIRE', 'Maladie respiratoire'), ('INFECTIEUSE', 'Maladie infectieuse'), ('AUTOIMMUNE', 'Maladie auto-immune'), ('MENTALE', 'Maladie mentale'), ('GENETIQUE', 'Maladie génétique'), ('CANCER', 'Cancer'), ('METABOLIQUE', 'Trouble métabolique'), ('NEUROLOGIQUE', 'Trouble neurologique'), ('AUTRE', 'Autre')], max_length=80)),
            ],
        ),
        migrations.CreateModel(
            name='Medicament',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('carte_id', models.CharField(max_length=255, unique=True)),
                ('valide', models.BooleanField(default=False)),
                ('certeficat', models.ImageField(blank=True, null=True, upload_to='certeficats/')),
                ('labo_number', models.CharField(blank=True, max_length=10, null=True)),
                ('specialite', models.CharField(choices=[('Cardiologie', 'CARDIOLOGIE'), ('Dermatologie', 'DERMATOLOGIE'), ('Gastro-entérologie', 'GASTRO_ENTEROLOGIE'), ('Neurologie', 'NEUROLOGIE'), ('Pédiatrie', 'PEDIATRIE'), ('Psychiatrie', 'PSYCHIATRIE'), ('Radiologie', 'RADIOLOGIE'), ('Chirurgie', 'CHIRURGIE'), ('Autre', 'AUTRE')], default=api.enums.Specialite['AUTRE'], max_length=50)),
            ],
            options={
                'verbose_name': 'Doctor',
                'verbose_name_plural': 'Doctors',
            },
            bases=('api.profile',),
            managers=[
                ('objects', api.managers.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='Labo',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('certeficat', models.ImageField(blank=True, null=True, upload_to='certeficats/')),
                ('valide', models.BooleanField(default=False)),
                ('labo_number', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'Labo',
                'verbose_name_plural': 'Labos',
            },
            bases=('api.profile',),
            managers=[
                ('objects', api.managers.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField(blank=True, null=True)),
                ('maladie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='maladies', to='api.maladie')),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='api.doctor')),
            ],
        ),
        migrations.CreateModel(
            name='MedicamentDetails',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('qte', models.IntegerField(default=1)),
                ('duree', models.IntegerField(default=7)),
                ('consultation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='medicaments', to='api.consultation')),
                ('medicament', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.medicament')),
            ],
        ),
        migrations.CreateModel(
            name='Centre',
            fields=[
                ('labo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='api.labo')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('api.labo',),
            managers=[
                ('objects', api.managers.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('profile_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('carte_id', models.CharField(max_length=255, unique=True)),
                ('img', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('birth_date', models.DateField(null=True)),
                ('numero_tel', models.CharField(blank=True, max_length=20, null=True)),
                ('blood_type', models.CharField(blank=True, choices=[('A+', 'A_POSITIVE'), ('A-', 'A_NEGATIVE'), ('B+', 'B_POSITIVE'), ('B-', 'B_NEGATIVE'), ('AB+', 'AB_POSITIVE'), ('AB-', 'AB_NEGATIVE'), ('O+', 'O_POSITIVE'), ('O-', 'O_NEGATIVE')], max_length=3, null=True)),
                ('gender', models.CharField(blank=True, choices=[('Male', 'MALE'), ('Female', 'FEMALE')], max_length=10, null=True)),
                ('emergency_number', models.CharField(blank=True, max_length=20, null=True)),
                ('married', models.CharField(blank=True, choices=[('Célibataire', 'CELIBATAIRE'), ('Marié(e)', 'MARIE'), ('Divorcé(e)', 'DIVORCE'), ('Veuf/Veuve', 'VEUF')], default=api.enums.SituationMatrimoniale['CELIBATAIRE'], max_length=20, null=True)),
                ('nbr_children', models.IntegerField(default=0)),
                ('allergies', models.ManyToManyField(blank=True, to='api.allergie')),
                ('antecedents', models.ManyToManyField(blank=True, related_name='antecedents', to='api.antecedent')),
                ('maladies', models.ManyToManyField(blank=True, to='api.maladie')),
            ],
            options={
                'verbose_name': 'Patient',
                'verbose_name_plural': 'Patients',
            },
            bases=('api.profile',),
            managers=[
                ('objects', api.managers.ProfileManager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentMedicale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nom', models.CharField(blank=True, max_length=100, null=True)),
                ('radio_type', models.CharField(blank=True, max_length=50, null=True)),
                ('radio_category', models.CharField(blank=True, max_length=50, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/')),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField(blank=True, null=True)),
                ('demande', models.BooleanField(default=True)),
                ('type_doc', models.CharField(default='R', max_length=5)),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents_as_medic', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.patient')),
            ],
        ),
        migrations.AddField(
            model_name='consultation',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations', to='api.patient'),
        ),
    ]
